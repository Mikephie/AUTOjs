// 电视直播插件 v1.4.0（引入新版分组匹配：直映 / host / path / 关键词 "三保险" + 白名单回退）
// - 强制覆盖源 group-title，确保与生成脚本分组口径一致
// - 其他：台标解析、别名、两向图标poster/backdrop维持原逻辑

WidgetMetadata = {
  id: "live",
  title: "直播(电视+网络)",
  detailCacheDuration: 60,
  modules: [
    {
      title: "直播(电视+网络)",
      requiresWebView: false,
      functionName: "loadLiveItems",
      cacheDuration: 21600,
      params: [
        {
          name: "url",
          title: "订阅链接",
          type: "input",
          description: "输入直播订阅链接地址",
          placeholders: [
            { title: "Mikephie-LiveTV (默认)", value: "https://raw.githubusercontent.com/Mikephie/AUTOjs/refs/heads/main/LiveTV/AKTV.m3u" }
          ]
        },
        {
          name: "group_filter",
          title: "频道分类（按组筛选，可留空）",
          type: "input",
          description: "按 group-title 关键字筛选（支持正则），留空为全部",
          placeholders: [
            { title: "全部", value: "" },
            { title: "香港台（hongkong）", value: "hongkong" },
            { title: "台湾台（taiwan）", value: "taiwan" },
            { title: "新加坡（mediacorp）", value: "mediacorp" },
            { title: "体育（sport）", value: "sport" },
            { title: "电影（movie）", value: "movie" },
            { title: "央视（cctv）", value: "cctv" }
          ]
        },
        {
          name: "name_filter",
          title: "按频道名关键字（可留空）",
          type: "input",
          description: "支持正则，如 TVB|翡翠|凤凰|民视|TVBS|CNA",
          placeholders: [
            { title: "全部", value: "" },
            { title: "TVB/翡翠", value: "TVB|翡翠" },
            { title: "凤凰系", value: "鳳凰|凤凰" },
            { title: "民视系", value: "民視|民视" },
            { title: "TVBS", value: "TVBS" },
            { title: "日本新闻", value: "Japan|日テレ|NTV|NEWS" }
          ]
        },
        {
          name: "bg_color",
          title: "台标背景色(仅在源无台标时生效)",
          type: "input",
          description: "RGB 颜色，如 DCDCDC",
          value: "DCDCDC"
        },
        {
          name: "direction",
          title: "台标优先显示方向",
          type: "enumeration",
          description: "不影响是否赋值，仅影响布局偏好",
          value: "V",
          enumOptions: [
            { title: "竖向", value: "V" },
            { title: "横向", value: "H" }
          ]
        },
        {
          name: "custom_icon_index",
          title: "自定义图标清单（可选）",
          type: "input",
          description: "支持 JSON/纯文本。你的结构 icons:[{name,url},...] 亦支持。",
          placeholders: [
            { title: "留空", value: "" },
            { title: "Mikephie icons.json", value: "https://img.mikephie.site/icons.json" }
          ]
        },
        {
          name: "custom_icon_base",
          title: "自定义图标 CDN 基址（可选）",
          type: "input",
          description: "当清单只给名字时拼 base/<Name>.png；若清单含 url 可留空"
        },
        {
          name: "custom_alias_map",
          title: "自定义别名映射 JSON（可选）",
          type: "input",
          description: "形如 {\"TVBS新闻\":\"TVBS新聞\",\"翡翠一台\":\"翡翠台\"}"
        }
      ]
    }
  ],
  version: "1.4.0",
  requiredVersion: "0.0.1",
  description: "解析直播订阅链接（始终输出 poster/backdrop，支持别名 & 模糊匹配）【MIKEPHIE】",
  author: "huangxd",
  site: "https://github.com/huangxd-/ForwardWidgets"
};

// =================== 缓存 ===================
const __cache = {
  myIcons: { ts: 0, data: null, url: null },
  myAlias: { ts: 0, data: null, url: null },
  fmIcons: { ts: 0, data: null }
};
const CACHE_TTL_MS = 10 * 60 * 1000;

// =================== 工具 ===================
const defaultPoster   = "https://i.miji.bid/2025/05/17/343e3416757775e312197588340fc0d3.png";
const defaultBackdrop = "https://i.miji.bid/2025/05/17/c4a0703b68a4d2313a27937d82b72b6a.png";

function normString(s) {
  return (s || "")
    .toLowerCase()
    .replace(/\s+/g, "")
    .replace(/hd|uhd/g, "")
    .replace(/[^\w]/g, "");
}

function defaultAlias() {
  return {
    // TVB 系
    "翡翠台": "翡翠台",
    "明珠台": "明珠台",
    "無線新聞台": "無線新聞台",
    "明珠剧集台": "明珠剧集台",
    "黃金翡翠台": "黃金翡翠台",
    "翡翠一台": "翡翠一台",
    "翡翠娛樂台": "翡翠娛樂台",
    "翡翠综合台": "翡翠综合台",
    // 凤凰卫视
    "鳳凰衛視中文台": "鳳凰衛視中文台",
    "鳳凰衛視資訊台": "鳳凰衛視資訊台",
    "鳳凰衛視香港台": "鳳凰衛視香港台",
    // 其他
    "美亞電影台": "美亞電影台",
    "天映經典": "天映經典",
    "美亞電影台(hk)": "美亞電影台",
    "天映經典(1080)": "天映經典",
    // 英文/空格变体
    "tvb plus": "TVBPlus",
    "popc": "PopC"
  };
}

// =================== 新：分组规则（与你生成脚本保持一致） ===================
const GROUP_WHITELIST = ["sport", "movie", "cctv", "mediacorp", "hongkong", "taiwan"];
const DEFAULT_GROUP   = "mix";

const GROUP_REMAP = {
  "CNA":"mediacorp","Channel 5":"mediacorp","Channel 5 HD":"mediacorp",
  "Channel 8":"mediacorp","Channel 8 HD":"mediacorp","Channel U":"mediacorp","Channel U HD":"mediacorp",
  "翡翠台":"hongkong","明珠台":"hongkong","無線新聞台":"hongkong","无线新闻台":"hongkong",
  "鳳凰衛視中文台":"hongkong","鳳凰衛視資訊台":"hongkong","鳳凰衛視香港台":"hongkong",
  "中天新闻台":"taiwan","東森新聞":"taiwan","寰宇新聞台":"taiwan","三立LIVE":"taiwan","民視":"taiwan","民视":"taiwan"
};

const RULES_HOST = [
  { test: /(espn|bein|skysports|foxsports|eleven|nba|bundesliga|laliga|premierleague)\./i, group: "sport" },
  { test: /(hbo|cinemax|celestial|starmovies|foxmovies|paramount|amc|mubi)\./i,           group: "movie" },
  { test: /(cctv|cntv|yangshipin)\./i,                                                    group: "cctv" },
  { test: /(mediacorp|mewatch|cna)\./i,                                                   group: "mediacorp" },
  { test: /(tvb|mytvsuper|viu|icable|nowtv|ifeng|phoenixtv)/i,                            group: "hongkong" },
  { test: /(ebc|ettv|ctitv|cts|ttv|setn|ftv|litv|hinet)/i,                                group: "taiwan" },
];

const RULES_PATH = [
  { test: /\/(sports?|nba|epl|laliga|seriea|bundesliga|f1|motogp|supersport)\b/i, group: "sport" },
  { test: /\/(movie|cinema|hbo|cinemax|celestial|starmovies|foxmovies|paramount|amc)\b/i, group: "movie" },
  { test: /\/(cctv|yangshipin|cntv)\b/i, group: "cctv" },
  { test: /\/axn\b/i, group: "movie" },
  { test: /\/animaxhk\b/i, group: "hongkong" },
  { test: /\/zhongtian\//i, group: "taiwan" },
  { test: /\/aktv\/CH-\d+\b/i, group: "hongkong" }
];

const KW = {
  sport: [/体育|體育|Sports?|ESPN|ELEVEN|beIN|Sky\s*Sports|Super\s*Sport|CCTV[-\s]*5|五星体育|NBA|英超|欧冠|中超/i],
  movie: [/电影|電影|Movies?|Cinema|HBO|Cinemax|Celestial|Star\s*Movies|FOX\s*Movies|Paramount|AMC|美亚|天映|\bAXN\b/i],
  cctv:  [/^CCTV[-\s]*\d{1,2}\+?$/i, /央视|央視|CCTV/i],
  mediacorp: [/^(cna|channel\s*5(\s*hd)?|channel\s*8(\s*hd)?|channel\s*u(\s*hd)?|suria|vasantham)\b/i],
  hongkong:  [/翡翠|明珠|無線|无线|TVB|星河|鳳凰|凤凰|\(HK\)/i],
  taiwan:    [/中天|東森|东森|三立|民視|民视|華視|华视|公視|公视|寰宇|龙华|龍華|緯來|纬来/i],
};
const hitKW = (s, arr) => arr.some(re => re.test(s||""));

// URL 分解
function getHostPath(u){
  try { const x = new URL(u); return { host: x.host || "", path: x.pathname || "" }; }
  catch { return { host:"", path:"" }; }
}

// 与生成器对齐的分类器
function classifyChannelForWidget({ tvgId, tvgName, dispName, url }){
  const blob = [tvgId, tvgName, dispName].filter(Boolean).join(" | ");
  const { host, path } = getHostPath(url || "");

  const direct = GROUP_REMAP[(dispName||"").trim()]
              || GROUP_REMAP[(tvgName||"").trim()]
              || GROUP_REMAP[(tvgId||"").trim()];
  if (direct) return direct;

  for (const r of RULES_HOST) if (r.test.test(host)) return r.group;
  for (const r of RULES_PATH) if (r.test.test(path)) return r.group;

  if (hitKW(blob, KW.sport)) return "sport";
  if (hitKW(blob, KW.movie)) return "movie";
  if (hitKW(blob, KW.cctv))  return "cctv";
  if (hitKW(blob, KW.mediacorp)) return "mediacorp";
  if (hitKW(blob, KW.hongkong))  return "hongkong";
  if (hitKW(blob, KW.taiwan))    return "taiwan";

  return DEFAULT_GROUP;
}

// =================== 主流程 ===================
async function loadLiveItems(params = {}) {
  try {
    const url = params.url || "";
    const groupFilter = params.group_filter || "";
    const nameFilter  = params.name_filter  || "";
    const bgColor     = params.bg_color     || "DCDCDC";
    const direction   = params.direction    || "V";

    const customIconIndex = (params.custom_icon_index || "").trim();
    const customIconBase  = (params.custom_icon_base  || "").trim().replace(/\/+$/,'');
    const customAliasMap  = (params.custom_alias_map  || "").trim();

    if (!url) throw new Error("必须提供电视直播订阅链接");

    const m3uText = await fetchM3UContent(url);
    if (!m3uText) return [];

    const [fmIcons, myIconsBundle, myAlias] = await Promise.all([
      fetchFanmingmingIcons(),
      fetchMyIcons(customIconIndex),
      fetchMyAlias(customAliasMap)
    ]);

    const iconNamesUnion = [...new Set([...(myIconsBundle.names || []), ...(fmIcons || [])])];
    const aliasMap = Object.assign({}, defaultAlias(), myAlias || {});

    const items = parseM3UContent(m3uText, iconNamesUnion, bgColor, direction, {
      aliasMap,
      customIconBase,
      customUrlMap: myIconsBundle.urlMap || {},
      customUrlMapNorm: myIconsBundle.urlMapNorm || {}
    });

    // 过滤使用"覆盖后的"分组
    const filtered = items.filter(item => {
      const groupMatch = !groupFilter || (() => {
        try { return new RegExp(groupFilter, 'i').test(item.metadata?.group || ''); }
        catch { return (item.metadata?.group?.toLowerCase() || '').includes(groupFilter.toLowerCase()); }
      })();
      const nameMatch = !nameFilter || (() => {
        try { return new RegExp(nameFilter, 'i').test(item.title || ''); }
        catch { return (item.title?.toLowerCase() || '').includes(nameFilter.toLowerCase()); }
      })();
      return groupMatch && nameMatch;
    });

    const total = filtered.length;
    return filtered.map((it, idx) => ({ ...it, title: `${it.title} (${idx + 1}/${total})` }));
  } catch (err) {
    console.error(`解析电视直播链接时出错: ${err.message}`);
    return [];
  }
}

// =================== 网络请求 ===================
async function fetchM3UContent(url) {
  try {
    const response = await Widget.http.get(url, { headers: { 'User-Agent': 'AptvPlayer/1.4.6' } });
    if (response.data && response.data.includes("#EXTINF")) return response.data;
    return null;
  } catch (e) {
    console.error(`获取M3U内容时出错: ${e.message}`);
    return null;
  }
}

async function fetchFanmingmingIcons() {
  const now = Date.now();
  if (__cache.fmIcons.data && now - __cache.fmIcons.ts < CACHE_TTL_MS) return __cache.fmIcons.data;
  try {
    const resp = await Widget.http.get(
      "https://api.github.com/repos/fanmingming/live/contents/tv",
      { headers: { 'Accept': 'application/vnd.github.v3+json' } }
    );
    const names = Array.isArray(resp.data)
      ? resp.data.filter(it => typeof it?.name === 'string' && it.name.toLowerCase().endsWith('.png'))
                .map(it => it.name.replace(/\.png$/i, ''))
      : [];
    __cache.fmIcons = { ts: now, data: names };
    return names;
  } catch (e) {
    console.error("获取公共图标失败：", e.message);
    __cache.fmIcons = { ts: now, data: [] };
    return [];
  }
}

// 支持：icons:[{name,url}] / 数组 / 纯文本
async function fetchMyIcons(indexUrl) {
  if (!indexUrl) return { names: [], urlMap: {}, urlMapNorm: {}, baseFromFile: "" };

  const now = Date.now();
  if (__cache.myIcons.data && __cache.myIcons.url === indexUrl && now - __cache.myIcons.ts < CACHE_TTL_MS) {
    return __cache.myIcons.data;
  }

  const bundle = { names: [], urlMap: {}, urlMapNorm: {}, baseFromFile: "" };

  try {
    const resp = await Widget.http.get(indexUrl, { headers: { 'User-Agent': 'AptvPlayer/1.4.6' } });
    const raw = resp.data;
    if (typeof raw === "string") {
      try {
        const j = JSON.parse(raw);
        parseIconsJson(j, bundle);
      } catch {
        raw.split(/\r?\n/).map(s => s.trim()).filter(Boolean)
          .forEach(s => bundle.names.push(s.replace(/\.png$/i,'')));
        bundle.names = [...new Set(bundle.names)];
      }
    } else if (Array.isArray(raw)) {
      bundle.names = [...new Set(raw.map(x => String(x).replace(/\.png$/i,'')))];
    } else if (raw && typeof raw === 'object') {
      parseIconsJson(raw, bundle);
    }
  } catch (e) {
    console.error("获取自定义图标清单失败：", e.message);
  }

  for (const [k, v] of Object.entries(bundle.urlMap)) {
    bundle.urlMapNorm[normString(k)] = v;
  }

  __cache.myIcons = { ts: now, data: bundle, url: indexUrl };
  return bundle;
}

function parseIconsJson(obj, bundle) {
  if (!obj || typeof obj !== "object") return;
  if (obj.base && typeof obj.base === "string") {
    bundle.baseFromFile = obj.base.replace(/\/+$/,'');
  }
  if (Array.isArray(obj.icons)) {
    for (const it of obj.icons) {
      const name = String(it?.name || "").replace(/\.png$/i,'').trim();
      const url  = String(it?.url  || "").trim();
      if (!name) continue;
      bundle.names.push(name);
      if (url) bundle.urlMap[name] = url;
    }
    bundle.names = [...new Set(bundle.names)];
  } else if (Array.isArray(obj)) {
    bundle.names = [...new Set(obj.map(x => String(x).replace(/\.png$/i,'')))];
  }
}

async function fetchMyAlias(url) {
  if (!url) return {};
  const now = Date.now();
  if (__cache.myAlias.data && __cache.myAlias.url === url && now - __cache.myAlias.ts < CACHE_TTL_MS) {
    return __cache.myAlias.data;
  }
  try {
    const resp = await Widget.http.get(url, { headers: { 'User-Agent': 'AptvPlayer/1.4.6' } });
    let obj = {};
    if (typeof resp.data === 'string') { try { obj = JSON.parse(resp.data) || {}; } catch {} }
    else if (resp.data && typeof resp.data === 'object') obj = resp.data || {};
    __cache.myAlias = { ts: now, data: obj, url };
    return obj;
  } catch (e) {
    console.error("获取自定义别名失败：", e.message);
    __cache.myAlias = { ts: now, data: {}, url };
    return {};
  }
}

// =================== 图标与解析 ===================
function makeIconMatcher(iconList, aliasMap) {
  const index = new Map();
  for (const name of iconList || []) index.set(normString(name), name);

  const pickName = (title, tvgName) => {
    const candidates = [title, tvgName].filter(Boolean);

    // 直接命中
    for (const c of candidates) {
      const n = normString(c);
      if (index.has(n)) return index.get(n);
    }
    // 别名
    for (const c of candidates) {
      const ali = aliasMap[c] || aliasMap[c?.toLowerCase?.()] || aliasMap[normString(c)];
      if (ali) {
        const a = normString(ali);
        if (index.has(a)) return index.get(a);
        if (index.has(ali)) return ali;
      }
    }
    // 简裁
    for (const c of candidates) {
      const n2 = normString(c).replace(/(live|news|高清|uhd)$/i, '');
      if (index.has(n2)) return index.get(n2);
    }
    return null;
  };

  return { pickName };
}

function buildIconUrls({ cover, iconName, bgColor, customIconBase, customUrlMap, customUrlMapNorm }) {
  if (cover) return { poster: cover, backdrop: cover };

  if (iconName) {
    const norm = normString(iconName);
    const fromJsonUrl = (customUrlMap && customUrlMap[iconName]) || (customUrlMapNorm && customUrlMapNorm[norm]);
    if (fromJsonUrl) return { poster: fromJsonUrl, backdrop: fromJsonUrl };

    if (customIconBase) {
      const u = `${customIconBase}/${encodeURIComponent(iconName)}.png`;
      return { poster: u, backdrop: u };
    }

    const poster = `https://ik.imagekit.io/huangxd/tr:l-image,i-transparent.png,w-bw_mul_3.5,h-bh_mul_3,bg-${bgColor},lfo-center,l-image,i-${encodeURIComponent(iconName)}.png,lfo-center,l-end,l-end/${encodeURIComponent(iconName)}.png`;
    const backdrop = `https://ik.imagekit.io/huangxd/tr:l-image,i-transparent.png,w-bw_mul_1.5,h-bh_mul_4,bg-${bgColor},lfo-center,l-image,i-${encodeURIComponent(iconName)}.png,lfo-center,l-end,l-end/${encodeURIComponent(iconName)}.png`;
    return { poster, backdrop };
  }

  return { poster: defaultPoster, backdrop: defaultBackdrop };
}

// =================== 解析 M3U（覆盖分组） ===================
function parseM3UContent(content, iconList, bgColor, direction, options = {}) {
  if (!content || !content.trim()) return [];
  const { aliasMap = {}, customIconBase = "", customUrlMap = {}, customUrlMapNorm = {} } = options;

  const { pickName } = makeIconMatcher(iconList, aliasMap);

  const lines = content.split(/\r?\n/);
  const items = [];
  let currentItem = null;

  const extInfRegex = /^#EXTINF:(-?\d+)(.*),(.*)$/;
  const groupRegex = /group-title="([^"]+)"/;
  const tvgNameRegex = /tvg-name="([^"]+)"/;
  const tvgLogoRegex = /tvg-logo="([^"]+)"/;
  const tvgIdRegex = /tvg-id="([^"]+)"/;

  for (let i = 0; i < lines.length; i++) {
    const line = lines[i].trim();
    if (!line || line.startsWith('#EXTM3U')) continue;

    if (line.startsWith('#EXTINF:')) {
      const match = line.match(extInfRegex);
      if (match) {
        const duration = match[1];
        const attributes = match[2];
        const title = match[3].trim();

        const groupMatch = attributes.match(groupRegex);
        const tvgNameMatch = attributes.match(tvgNameRegex);
        const tvgLogoMatch = attributes.match(tvgLogoRegex);
        const tvgIdMatch = attributes.match(tvgIdRegex);

        const originalGroup = groupMatch ? groupMatch[1] : '未分类';
        const tvgName = tvgNameMatch ? tvgNameMatch[1] : title;
        const cover = tvgLogoMatch ? tvgLogoMatch[1] : '';
        const tvgId = tvgIdMatch ? tvgIdMatch[1] : '';

        currentItem = { duration, title, originalGroup, tvgName, tvgId, cover, url: null };
      }
    } else if (currentItem && line && !line.startsWith('#')) {
      const url = line;

      // ---- 新：按你的新规则分类（直映→host→path→关键词），并做白名单/默认回退 ----
      let targetGroup = classifyChannelForWidget({
        tvgId: currentItem.tvgId,
        tvgName: currentItem.tvgName,
        dispName: currentItem.title,
        url
      });
      if (!GROUP_WHITELIST.includes(targetGroup)) targetGroup = DEFAULT_GROUP;

      const iconName = pickName(currentItem.title, currentItem.tvgName);
      const { poster, backdrop } = buildIconUrls({
        cover: currentItem.cover,
        iconName,
        bgColor,
        customIconBase,
        customUrlMap,
        customUrlMapNorm
      });

      const item = {
        id: url,
        type: "url",
        title: currentItem.title,
        posterPath:   poster   || defaultPoster,
        backdropPath: backdrop || defaultBackdrop,
        previewUrl: "",
        link: url,
        metadata: {
          group: targetGroup,        // 强制覆盖后的分组
          tvgName: currentItem.tvgName,
          tvgId: currentItem.tvgId,
          groupFrom: currentItem.originalGroup // 记录原始分组以便排查
        }
      };

      items.push(item);
      currentItem = null;
    }
  }
  return items;
}

// =================== 详情页 ===================
async function loadDetail(link) {
  let videoUrl = link;
  let childItems = [];

  const formats = ['m3u8', 'mp4', 'mp3', 'flv', 'avi', 'mov', 'wmv', 'webm', 'ogg', 'mkv', 'ts'];
  if (!formats.some(fmt => link.includes(fmt))) {
    const url = `https://redirect-check.hxd.ip-ddns.com/redirect-check?url=${encodeURIComponent(link)}`;
    const resp = await Widget.http.get(url, { headers: { "User-Agent": "AptvPlayer/1.4.6" } });

    if (resp.data && resp.data.location && formats.some(fmt => resp.data.location.includes(fmt))) {
      videoUrl = resp.data.location;
    }

    if (resp.data && resp.data.error && resp.data.error.includes("超时")) {
      childItems = [{
        id: videoUrl,
        type: "url",
        title: "超时/上面直播不可用",
        posterPath: defaultPoster,
        backdropPath: defaultBackdrop,
        link: videoUrl
      }];
    }
  }

  return {
    id: link,
    type: "detail",
    videoUrl,
    customHeaders: { "Referer": link, "User-Agent": "AptvPlayer/1.4.6" },
    childItems
  };
}